package com.github.alfonsoleandro.mpheadsexp.listeners;

import com.github.alfonsoleandro.mpheadsexp.HeadsExp;
import com.github.alfonsoleandro.mpheadsexp.managers.HeadsManager;
import com.github.alfonsoleandro.mpheadsexp.managers.LevelsManager;
import com.github.alfonsoleandro.mpheadsexp.managers.Settings;
import com.github.alfonsoleandro.mpheadsexp.managers.utils.MobHeadData;
import com.github.alfonsoleandro.mputils.guis.DynamicGUI;
import com.github.alfonsoleandro.mputils.guis.PaginatedGUI;
import com.github.alfonsoleandro.mputils.guis.events.GUIButtonClickEvent;
import com.github.alfonsoleandro.mputils.guis.events.GUIClickEvent;
import com.github.alfonsoleandro.mputils.itemstacks.MPItemStacks;
import com.github.alfonsoleandro.mputils.string.StringUtils;
import org.bukkit.ChatColor;
import org.bukkit.Material;
import org.bukkit.configuration.ConfigurationSection;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;

import java.util.*;
import java.util.stream.Collectors;

public class InfoGUIClickListener implements Listener {

    private final HeadsExp plugin;
    private final Settings settings;
    private final HeadsManager headsManager;
    private final LevelsManager levelsManager;

    public InfoGUIClickListener(HeadsExp plugin){
        this.plugin = plugin;
        this.settings = plugin.getSettings();
        this.headsManager = plugin.getHeadsManager();
        this.levelsManager = plugin.getLevelsManager();
    }

    @EventHandler
    public void onGUIClick(GUIClickEvent event){
        //Check if the GUI was generated by this plugin
        if(!event.getGui().getGuiTags().startsWith("MPHeadsExp:")) return;
        if(event.isButtonClick()) return;
        event.setCancelled(true);

        //If the click was outside the GUI menu or no item was clicked
        ItemStack current = event.getCurrentItem();
        if(current == null || current.getType().isAir()) return;
        if(event.getRawSlot() > 54) return;

        // Manage info GUI clicks
        if(event.getGui().getGuiTags().equalsIgnoreCase("MPHeadsExp:info")){
            int clickedSlot = event.getSlot();

            if(clickedSlot == this.settings.getInfoUnlockedHeadsGUIItemSlot()){
                openUnlockedHeadsGUI((Player) event.getWhoClicked());
            }else if(clickedSlot == this.settings.getInfoSoldHeadsGUIItemSlot()){
                openSoldHeadsGUI((Player) event.getWhoClicked());
            }

        }
    }

    @EventHandler
    public void onGUIButtonClick(GUIButtonClickEvent event){
        //Check if the GUI was generated by this plugin
        if(!event.getGui().getGuiTags().startsWith("MPHeadsExp:")) return;
        event.setCancelled(true);
        if(!event.buttonMetCondition()) return;
        String buttonTags = event.getClickedButton().getButtonTags();
        Player player = (Player) event.getWhoClicked();

        if(buttonTags.equalsIgnoreCase("MPHeads:previousPage")){
            event.getGui().setPage(player, event.getPage()-1);
        }else if(buttonTags.equalsIgnoreCase("MPHeads.nextPage")){
            event.getGui().setPage(player, event.getPage()+1);
        }

    }



    private void openUnlockedHeadsGUI(Player player){
        int level = this.levelsManager.getLevel(player.getUniqueId());


        DynamicGUI headList = new DynamicGUI(
                StringUtils.colorizeString('&',
                        this.settings.getUnlockedHeadsGUITitle()),
                "MPHeadsExp:unlockedHeads",
                this.settings.getNavBar());

        Map<String,Integer> unlockedHeads = new HashMap<>();
        for(MobHeadData data : this.headsManager.getMobHeads().values()){
            unlockedHeads.put(data.getMobType(), data.getRequiredLevel());
        }

        unlockedHeads = unlockedHeads.entrySet()
                .stream()
                .sorted(Map.Entry.comparingByValue())
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new));

        boolean showBarrier = this.settings.isShowBarrierForLockedHeadsGUI();
        String locked = StringUtils.colorizeString('&', this.settings.getUnlockedHeadsGUILockedHead());
        String unlocked = StringUtils.colorizeString('&',this.settings.getUnlockedHeadsGUIUnlockedHead());
        String name = this.settings.getUnlockedHeadsGUIItemName();
        List<String> lore = this.settings.getUnlockedHeadsGUIItemLore();

        for(String type : unlockedHeads.keySet()){
            ItemStack item;
            if(showBarrier && level < unlockedHeads.get(type)){
                item = new ItemStack(Material.BARRIER);
            }else {
                item = this.plugin.getHeadsManager().getMobHeadData(type).getHeadItem().clone();
            }
            Map<String,String> placeHolders = new HashMap<>();
            placeHolders.put("%type%", type);
            placeHolders.put("%status%", unlockedHeads.get(type) <= level ? unlocked : locked);
            placeHolders.put("%level%", String.valueOf(level));
            placeHolders.put("%required%", String.valueOf(unlockedHeads.get(type)));

            headList.addItem(MPItemStacks.replacePlaceholders(
                    MPItemStacks.rename(item, name, lore),
                    placeHolders));
        }

        headList.setNavBar(this.settings.getNavBar());

        headList.openGUI(player);

    }



    private void openSoldHeadsGUI(Player player){
        FileConfiguration config = plugin.getConfigYaml().getAccess();
        ConfigurationSection playerRecords = plugin.getRecordsYaml().getAccess().getConfigurationSection("records."+player.getName());
        List<ItemStack> items = new ArrayList<>();
        if(playerRecords == null) {
            items.add(MPItemStacks.newItemStack(
                    Material.BARRIER,
                    1,
                    config.getString("sold heads gui.none sold.name"),
                    config.getStringList("sold heads gui.none sold.lore")
            ));
        }else{
            Map<String, Integer> register = new HashMap<>();

            for (String type : playerRecords.getKeys(false)) {
                if(type.equalsIgnoreCase("players")) {
                    for(String playerName : playerRecords.getConfigurationSection("players").getKeys(false)){
                        register.put(playerName, playerRecords.getInt("players."+playerName));
                    }
                    continue;
                }
                register.put(type, playerRecords.getInt(type));
            }

            register = register.entrySet()
                    .stream()
                    .sorted(Map.Entry.comparingByValue((o1, o2) -> {
                        if(o1.equals(o2)) return 0;
                        return o1 < o2 ? 1 : -1;
                    }))
                    .collect(Collectors.toMap(Map.Entry::getKey,
                            Map.Entry::getValue,
                            (e1, e2) -> e1,
                            LinkedHashMap::new));


            for (String type : register.keySet()) {
                ItemStack head;
                try{
                    head = this.plugin.getHeadsManager().getMobHeadData(type).getHeadItem().clone();
                }catch (Exception e){
                    head = this.plugin.getHeadsManager().getPlayerHead(type).clone();
                }
                ItemMeta meta = head.getItemMeta();
                assert meta != null;
                meta.setDisplayName(ChatColor.translateAlternateColorCodes('&', config.getString("sold heads gui.heads.name").replace("%type%", type).replace("%sold%", String.valueOf(register.get(type)))));

                List<String> lore = new ArrayList<>();
                for (String line : config.getStringList("sold heads gui.heads.lore")) {
                    lore.add(ChatColor.translateAlternateColorCodes('&', line.replace("%type%", type).replace("%sold%", String.valueOf(register.get(type)))));
                }
                meta.setLore(lore);
                head.setItemMeta(meta);

                items.add(head);
            }
        }

        String title = config.getString("sold heads gui.title");
        int size = 54;

        PaginatedGUI soldHeads = new PaginatedGUI(
                StringUtils.colorizeString('&', title),
                size,
                items,
                "MPHeadsExp:soldHeads"
        );

        soldHeads.setNavBar(this.settings.getNavBar());

        soldHeads.openGUI(player);
    }


}
