package com.github.alfonsoleandro.mpheadsexp.events;

import com.github.alfonsoleandro.mpheadsexp.HeadsExp;
import com.github.alfonsoleandro.mpheadsexp.managers.LevelsManager;
import com.github.alfonsoleandro.mputils.guis.PaginatedGUI;
import com.github.alfonsoleandro.mputils.guis.events.GUIClickEvent;
import com.github.alfonsoleandro.mputils.guis.utils.GUIType;
import com.github.alfonsoleandro.mputils.itemstacks.MPItemStacks;
import com.github.alfonsoleandro.mputils.string.StringUtils;
import org.bukkit.ChatColor;
import org.bukkit.Material;
import org.bukkit.configuration.ConfigurationSection;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;

import java.util.*;
import java.util.stream.Collectors;

public class InfoGUIClickEvent implements Listener {

    private final HeadsExp plugin;

    public InfoGUIClickEvent(HeadsExp plugin){
        this.plugin = plugin;
    }

    @EventHandler
    public void onGUIClick(GUIClickEvent event){
        //Check if the GUI was generated by this plugin
        if(!event.getGui().getGuiTags().startsWith("MPHeadsExp:")) return;
        event.setCancelled(true);

        //Check if the gui type is paginated
        //In the case that is the case, only check for next page/previous page functions
        if(event.getGuiType().equals(GUIType.PAGINATED)){
            ItemStack clickedItem = event.getEvent().getCurrentItem();
            if(clickedItem == null) return;

            int clickedSlot = event.getEvent().getSlot();
            int currentPage = event.getPage();

            if(clickedSlot > 44) {
                PaginatedGUI gui = (PaginatedGUI) event.getGui();
                if(clickedItem.equals(gui.getNextPageItem(currentPage))) {
                    gui.openGUI(event.getClicker(), currentPage + 1);
                } else if(clickedItem.equals(gui.getPreviousPageItem(currentPage))) {
                    gui.openGUI(event.getClicker(), currentPage - 1);
                }
                return;
            }

            return;
        }

        //If the click was outside the GUI menu or no item was clicked
        if(event.getEvent().getCurrentItem() == null || event.getEvent().getCurrentItem().getType().equals(Material.AIR)) return;
        if(event.getEvent().getRawSlot() > 54) return;

        //
        if(event.getGui().getGuiTags().equalsIgnoreCase("MPHeadsExp:info")){
            FileConfiguration config = plugin.getConfigYaml().getAccess();
            int clickedSlot = event.getEvent().getSlot();

            if(clickedSlot == config.getInt("info gui.unlocked heads item.slot")){
                openUnlockedHeadsGUI(event.getClicker());

            }else if(clickedSlot == config.getInt("info gui.sold heads item.slot")){
                openSoldHeadsGUI(event.getClicker());

            }

        }
    }



    private void openUnlockedHeadsGUI(Player player){
        FileConfiguration config = plugin.getConfigYaml().getAccess();
        LevelsManager manager = plugin.getLevelsManager();
        int level = manager.getLevel(player.getUniqueId());

        Map<String,Integer> unlockedHeads = new HashMap<>();
        for(String mobType : config.getConfigurationSection("heads").getKeys(false)){
            unlockedHeads.put(mobType,
                    config.getInt("heads."+mobType+".required level"));
        }

        unlockedHeads = unlockedHeads.entrySet()
                .stream()
                .sorted(Map.Entry.comparingByValue())
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new));

        List<ItemStack> items = new ArrayList<>();
        boolean showBarrier = config.getBoolean("unlocked heads gui.show barrier for locked");
        String locked = StringUtils.colorizeString('&', config.getString("unlocked heads gui.locked"));
        String unlocked = StringUtils.colorizeString('&',config.getString("unlocked heads gui.unlocked"));
        String name = config.getString("unlocked heads gui.heads.name");

        for(String type : unlockedHeads.keySet()){
            ItemStack item;
            if(showBarrier && level < config.getInt("heads."+type+".required level")){
                item = new ItemStack(Material.BARRIER);
            }else {
                item = plugin.getHeadsManager().getMobHead(EntityType.valueOf(type)).clone();
            }

            ItemMeta meta = item.getItemMeta();
            meta.setDisplayName(StringUtils.colorizeString('&', name));

            List<String> lore = new ArrayList<>();
            for(String line : config.getStringList("unlocked heads gui.heads.lore")){
                lore.add(StringUtils.colorizeString('&', line));
            }
            meta.setLore(lore);

            item.setItemMeta(meta);

            Map<String,String> placeHolders = new HashMap<>();
            placeHolders.put("%type%", type);
            placeHolders.put("%status%", unlockedHeads.get(type) <= level ? unlocked : locked);
            placeHolders.put("%level%", String.valueOf(level));
            placeHolders.put("%required%", String.valueOf(config.getInt("heads."+type+".required level")));

            items.add(MPItemStacks.replacePlaceholders(item, placeHolders));
        }

        String title = config.getString("unlocked heads gui.title");
        int size = 54;

        PaginatedGUI headList = new PaginatedGUI(
                StringUtils.colorizeString('&', title),
                size,
                items,
                "MPHeadsExp:unlockedHeads"
        );

        setNavBar(headList);

        headList.openGUI(player);

    }



    private void openSoldHeadsGUI(Player player){
        FileConfiguration config = plugin.getConfigYaml().getAccess();
        ConfigurationSection playerRecords = plugin.getRecordsYaml().getAccess().getConfigurationSection("records."+player.getName());
        List<ItemStack> items = new ArrayList<>();
        if(playerRecords == null) {
            items.add(MPItemStacks.newItemStack(
                    Material.BARRIER,
                    1,
                    config.getString("sold heads gui.none sold.name"),
                    config.getStringList("sold heads gui.none sold.lore")
                    ));
        }else{
            Map<String, Integer> register = new HashMap<>();

            for (String type : playerRecords.getKeys(false)) {
                if(type.equalsIgnoreCase("players")) {
                    for(String playerName : playerRecords.getConfigurationSection("players").getKeys(false)){
                        register.put(playerName, playerRecords.getInt("players."+playerName));
                    }
                        continue;
                }
                register.put(type, playerRecords.getInt(type));
            }

            register = register.entrySet()
                    .stream()
                    .sorted(Map.Entry.comparingByValue((o1, o2) -> {
                        if(o1.equals(o2)) return 0;
                        return o1 < o2 ? 1 : -1;
                    }))
                    .collect(Collectors.toMap(Map.Entry::getKey,
                            Map.Entry::getValue,
                            (e1, e2) -> e1,
                            LinkedHashMap::new));


            for (String type : register.keySet()) {
                ItemStack head;
                try{
                    head = plugin.getHeadsManager().getMobHead(EntityType.valueOf(type)).clone();
                }catch (Exception e){
                    head = plugin.getHeadsManager().getPlayerHead(type).clone();
                }
                ItemMeta meta = head.getItemMeta();
                assert meta != null;
                meta.setDisplayName(ChatColor.translateAlternateColorCodes('&', config.getString("sold heads gui.heads.name").replace("%type%", type).replace("%sold%", String.valueOf(register.get(type)))));

                List<String> lore = new ArrayList<>();
                for (String line : config.getStringList("sold heads gui.heads.lore")) {
                    lore.add(ChatColor.translateAlternateColorCodes('&', line.replace("%type%", type).replace("%sold%", String.valueOf(register.get(type)))));
                }
                meta.setLore(lore);
                head.setItemMeta(meta);

                items.add(head);
            }
        }

        String title = config.getString("sold heads gui.title");
        int size = 54;

        PaginatedGUI soldHeads = new PaginatedGUI(
                StringUtils.colorizeString('&', title),
                size,
                items,
                "MPHeadsExp:soldHeads"
        );

        setNavBar(soldHeads);

        soldHeads.openGUI(player);
    }


    private void setNavBar(PaginatedGUI gui){
        FileConfiguration config = plugin.getConfigYaml().getAccess();

        gui.setNavbarItem(MPItemStacks.newItemStack(
                Material.BLACK_STAINED_GLASS_PANE,
                1,
                "&7&l*",
                new ArrayList<>()
        ));

        gui.setCurrentPageItem(MPItemStacks.newItemStack(
                Material.BOOK,
                1,
                config.getString("gui navigation bar items.current page.name"),
                config.getStringList("gui navigation bar items.current page.lore")
        ));

        gui.setNextPageItem(MPItemStacks.newItemStack(
                Material.ARROW,
                1,
                config.getString("gui navigation bar items.next page.name"),
                config.getStringList("gui navigation bar items.next page.lore")
        ));

        gui.setPreviousPageItem(MPItemStacks.newItemStack(
                Material.ARROW,
                1,
                config.getString("gui navigation bar items.previous page.name"),
                config.getStringList("gui navigation bar items.previous page.lore")
        ));

    }

}
